<body></body>
<script src="http://gamingJS.com/Three.js"></script>
<script src="http://gamingJS.com/ChromeFixes.js"></script>
<script src="http://gamingJS.com/Tween.js"></script>
<script src="http://gamingJS.com/Scoreboard.js"></script>
<script src="http://gamingJS.com/Sounds.js"></script>
<script>

  // This is where stuff in our game will happen:
  var scene = new THREE.Scene();

  // This is what sees the stuff:
  var aspect_ratio = window.innerWidth / window.innerHeight;
  var camera = new THREE.PerspectiveCamera(75, aspect_ratio, 1, 10000);
  camera.position.z = 500;
//1 add camera to scene...avatar moves
//scene.add(camera);


  // This will draw what the camera sees onto the screen:
  var renderer = new THREE.CanvasRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  var not_allowed = [];

var scoreboard = new Scoreboard();
scoreboard.countdown(45);
scoreboard.score();
scoreboard.help(
  'Arrow keys to move.'+
  'Space bar to jump for fruit'+
  'Watch for shaking trees with fruit'+
  'Get near the tree and jump before the fruit is gone!'
  );


var game_over = false;
scoreboard.onTimeExpired(function() {
  scoreboard.messageg("Game Over!");
  game_over = true;
  });


//3 add camera to marker
var marker = new THREE.Object3D();
scene.add(marker);


  // ******** body
var cover = new THREE.MeshNormalMaterial();
var body = new THREE.SphereGeometry(100);
var avatar = new THREE.Mesh(body, cover);
//works on 2
//scene.add(avatar);
//works on 3

marker.add(avatar);


// ******** right hand
var hand = new THREE.SphereGeometry(50);

var right_hand = new THREE.Mesh(hand, cover);
right_hand.position.set(-150, 0, 0);
avatar.add(right_hand);
// ******** right hand move
right_hand.position.z = 100;



// ******** left hand
var left_hand = new THREE.Mesh(hand, cover);
left_hand.position.set(150, 0, 0);
avatar.add(left_hand);

// ******** right foot
var foot = new THREE.SphereGeometry(50);
var right_foot = new THREE.Mesh(foot, cover);
right_foot.position.set(-100, -100, 0);
avatar.add(right_foot);
// ******** left hand
var left_foot = new THREE.Mesh(foot, cover);
left_foot.position.set(100, -100, 0);
avatar.add(left_foot);
//2 bind camera to avatar..scene move around avatar
//avatar.add(camera);
//3 bind camera to marker
marker.add(camera);


// ********* TREES
var tree_with_treasure;
var trees = [];
trees.push(makeTreeAt( 500, 0));
trees.push(makeTreeAt( -500, 0));
trees.push(makeTreeAt( 750, -1000));
trees.push(makeTreeAt( -750, -1000));

function makeTreeAt(x,z) {

 var trunk = new THREE.Mesh(
   new THREE.CylinderGeometry(50, 50, 200),
   new THREE.MeshBasicMaterial({color:0xA0522D})
   );

   var top = new THREE.Mesh(
     new THREE.SphereGeometry(150),
     new THREE.MeshBasicMaterial({color: 0x228B22})
     );

     top.position.y = 175;
     trunk.add(top);

var boundary = new THREE.Mesh(
    new THREE.CircleGeometry(300),
    new THREE.MeshNormalMaterial()
    );
    boundary.position.y = -100;
    boundary.rotation.x = -Math.PI/2;
    trunk.add(boundary);

    not_allowed.push(boundary);


     trunk.position.set(x, -75, z);
     scene.add(trunk);

     //dont change any above

     //add the following line
     return top;
}

function shakeTree() {
  tree_with_treasure = Math.floor(Math.random() * trees.length);

  new TWEEN
  .Tween({x:0})
  .to({x: 2*Math.PI}, 200)
  .repeat(20)
  .onUpdate(function() {
    trees[tree_with_treasure].position.x = 75 * Math.sin(this.x);
  })
  .start();

  setTimeout(shakeTree, 12*1000);


}

shakeTree();




// ******** animate WALK  - ACROBATICS - TURN
var clock = new THREE.Clock(true);
function animate() {
 requestAnimationFrame(animate);
 TWEEN.update();
 walk();
 turn();
 acrobatics();
 renderer.render(scene, camera);
}
animate();


// ******** walk
function walk() {
  if (!isWalking()) return;
  var position = Math.sin(clock.getElapsedTime()*5) * 50;
  right_hand.position.z = position;
  left_hand.position.z = -position;
  right_foot.position.z = -position;
  left_foot.position.z = position;
}


//**************turn
function turn() {
  var direction = 0;
  if (is_moving_forward) direction = Math.PI;
  if (is_moving_back) direction = 0;
  if (is_moving_right) direction = Math.PI/2;
  if (is_moving_left) direction = -Math.PI/2;
  //avatar.rotation.y = direction;
  spinAvatar(direction);
}


//**************turn
function spinAvatar(direction) {
  new TWEEN.
  Tween({y: avatar.rotation.y}).
  to({y: direction}, 100).
  onUpdate(function () {
    avatar.rotation.y = this.y;
  }).
  start();
}


// ******** acrobatics
//flipping on off
var is_flipping = false;
//cartwheeln on off
var is_cartwheeln = false;
//spin on off
var is_spinning = false;

function acrobatics() {
  if (is_flipping) {
 avatar.rotation.x = avatar.rotation.x + 0.05;
 }
 if (is_cartwheeln) {
 avatar.rotation.z = avatar.rotation.z + 0.05;
 }
 if (is_spinning) {
 avatar.rotation.y = avatar.rotation.y + 0.05;
 }

}



  // Now, show what the camera sees on the screen:
  //renderer.render(scene, camera);

//2 camera binds to avatar
//listen to keyboard events
//document.addEventListener('keydown', function(event) {
//  var code = event.keyCode;
//  if (code == 37) avatar.position.x = avatar.position.x-5;  //left
//  if (code == 38) avatar.position.z = avatar.position.z-5;  //up
//  if (code == 39) avatar.position.x = avatar.position.x+5;  //right
//  if (code == 40) avatar.position.z = avatar.position.z+5;  //down
//  if (code == 67) is_flipping = !is_flipping;  //c
//  if (code == 70) is_cartwheeln = !is_cartwheeln;  //f
//  if (code == 71) is_spinning = !is_spinning;  //g
//});

var is_moving_right, is_moving_left, is_moving_forward, is_moving_back;
function isWalking() {
  if (is_moving_right) return true;
  if (is_moving_left) return true;
  if (is_moving_forward) return true;
  if (is_moving_back) return true;
  return false;
}


//listen to keyboard events
document.addEventListener('keydown', function(event) {
  var code = event.keyCode;
  if (code == 32) jump();

  if (code == 37) {
    marker.position.x = marker.position.x-50;  //left
    is_moving_left = true;
  }
  if (code == 38) {
    marker.position.z = marker.position.z-50;  //up - forward
    is_moving_forward = true;
  }
  if (code == 39) {
    marker.position.x = marker.position.x+50;  //right
    is_moving_right = true;
  }
  if (code == 40) {
    marker.position.z = marker.position.z+50;  //down - back
    is_moving_back = true;
  }
  if (code == 67) is_flipping = !is_flipping;  //c
  if (code == 70) is_cartwheeln = !is_cartwheeln;  //f
  if (code == 71) is_spinning = !is_spinning;  //g

  if (detectCollisions()) {
    if (is_moving_left) marker.position.x = marker.position.x+5;
    if (is_moving_right) marker.position.x = marker.position.x-5;
    if (is_moving_forward) marker.position.x = marker.position.z+5;
    if (is_moving_back) marker.position.x = marker.position.z-5;

  }

//listen to keyboard events
document.addEventListener('keyup', function(event) {
  var code = event.keyCode;

  if (code == 37) is_moving_left = false;
  if (code == 38) is_moving_forward = false;
  if (code == 39) is_moving_right = false;
  if (code == 40) is_moving_back = false;
});

function detectCollisions() {
  var vector = new THREE.Vector3(0,-1,0);
  var ray = new THREE.Ray(marker.position, vector);
  var intersects = ray.intersectObjects(not_allowed);
  if (intersects.length > 0) return true;
  return false;
}


  function jump() {
    checkForTreasure();
    animateJump();
  }

  function checkForTreasure() {
    if (tree_with_treasure === undefined) return;

    var treasure_tree = trees[tree_with_treasure],
    p1 = treasure_tree.parent.position,
    p2 = marker.position;

    var distance = Math.sqrt(
      (p1.x - p2.x)*(p1.x - p2.x) +
      (p1.z - p2.z)*(p1.z - p2.z)
      );

      if (distance<500) {
        scorePoints();
      }

  }

  function scorePoints() {
    if (scoreboard.getTimeRemaining() === 0) return;
    scoreboard.addPoints(10);
  }

var fruit;
function animateFruit() {
  if (fruit) return;
  fruit = new THREE.Mesh(
    new THREE.CylinderGeometry(25,25,5,25),
    new THREE.MeshBasicMaterial({color: 0xFFD700})
    );
    fruit.rotation.x = Math.PI/2;

    marker.add(fruit);

    new TWEEN.
    Tween({
      height:150,
      spin: 0
    }).
    to ({
      height:250,
      spin:4
    }, 500).
    onUpdate(function() {
      fruit.position.y = this.height;
      fruit.rotation.z = this.spin;
    }).
    onComplete(function() {
      marker.remove(fruit);
      fruit = undefined;
    }).
    start();
}


  function animateJump() {
    new TWEEN
    .Tween({jump: 0})
    .to({jump: Math.PI}, 500)
    .onUpdate(function () {
      marker.position.y = 200* Math.sin(this.jump);
    })
    .start();
  }
});


</script>
