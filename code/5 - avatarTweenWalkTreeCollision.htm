<body>5 - avatarTweenWalkTreeCollision.htm</body>
<script src="http://gamingJS.com/Three.js"></script>
<script src="http://gamingJS.com/ChromeFixes.js"></script>
<script src="http://gamingJS.com/Tween.js"></script>
<script>
//WE WILL DEMO THE TWEEN SMOOTHNESS
//ADD COLLISION DETECTION TO TREES THAT AVATAR CAN NOT PASS THROUGH

  // This is where stuff in our game will happen:
  var scene = new THREE.Scene();
  // This is what sees the stuff:
  var aspect_ratio = window.innerWidth / window.innerHeight;
  var camera = new THREE.PerspectiveCamera(75, aspect_ratio, 1, 10000);
  camera.position.z = 500;
  // This will draw what the camera sees onto the screen:
  var renderer = new THREE.CanvasRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);
  // add camera to marker
  var marker = new THREE.Object3D();
  scene.add(marker);


  //  CREATE NOT ALLOWED ZONES OBJECT ARRAY
  var not_allowed = [];


  // ******** BODY
  var cover = new THREE.MeshNormalMaterial();
  var body = new THREE.SphereGeometry(100);
  var avatar = new THREE.Mesh(body, cover);
  //SET AVATAR TO MARKER
  marker.add(avatar);


  // ******** HANDS
  var hand = new THREE.SphereGeometry(50);
  // ******** RIGHT HAND
  var right_hand = new THREE.Mesh(hand, cover);
  right_hand.position.set(-150, 0, 0);
  avatar.add(right_hand);
  // ******** right hand inital position
  right_hand.position.z = 100;
  // ******** LEFT HAND
  var left_hand = new THREE.Mesh(hand, cover);
  left_hand.position.set(150, 0, 0);
  avatar.add(left_hand);

  // ******** FEET
  var foot = new THREE.SphereGeometry(50);
  // ******** RIGHT FOOT
  var right_foot = new THREE.Mesh(foot, cover);
  // ******** right foot inital position
  right_foot.position.set(-100, -100, 0);
  avatar.add(right_foot);
  // ******** LEFT FOOT
  var left_foot = new THREE.Mesh(foot, cover);
  left_foot.position.set(100, -100, 0);
  avatar.add(left_foot);

  //SET CAMERA TO AVATAR MARKER
  marker.add(camera);


  // ********* TREES
  makeTreeAt( 500, 0);
  makeTreeAt( -500, 0);
  makeTreeAt( 750, -1000);
  makeTreeAt( -750, -1000);

  function makeTreeAt(x,z) {

   var trunk = new THREE.Mesh(
     new THREE.CylinderGeometry(50, 50, 200),
     new THREE.MeshBasicMaterial({color:0xA0522D})
     );

   var top = new THREE.Mesh(
     new THREE.SphereGeometry(150),
     new THREE.MeshBasicMaterial({color: 0x228B22})
     );

     top.position.y = 175;
     trunk.add(top);

    //  CREATE NOT ALLOWED ZONES OBJECT
    var boundary = new THREE.Mesh(
        new THREE.CircleGeometry(300),
        new THREE.MeshNormalMaterial()
        );
        boundary.position.y = -100;
        boundary.rotation.x = -Math.PI/2;
        //  PUT BOUNDRY ON TREE
        trunk.add(boundary);
    
    //  ADD BOUNDRY TO NOT ALLOWED ZONES OBJECT
    not_allowed.push(boundary);
    
    //  PUT TREE ON SCENE
    trunk.position.set(x, -75, z);
    scene.add(trunk);
  }

  // ******** ANIMATION WALK  - ACROBATICS - TURN
  var clock = new THREE.Clock(true);

  function animate() {
   requestAnimationFrame(animate);
   TWEEN.update();
   walk();
   turn();
   acrobatics();
   renderer.render(scene, camera);
  }
  animate();

  // ******** AVATAR walk
  function walk() {
    if (!isWalking()) return;
    var position = Math.sin(clock.getElapsedTime()*5) * 50;
    right_hand.position.z = position;
    left_hand.position.z = -position;
    right_foot.position.z = -position;
    left_foot.position.z = position;
  }

  //************** AVATAR turn
  function turn() {
    var direction = 0;
    if (is_moving_forward) direction = Math.PI;
    if (is_moving_back) direction = 0;
    if (is_moving_right) direction = Math.PI/2;
    if (is_moving_left) direction = -Math.PI/2;
    // PASS DIRECTION TO THE TWEEN BLING 
    spinAvatar(direction);
  }

  //************** ADD TWEEN TO AVATAR FOR SMOOTH SPIN 
  function spinAvatar(direction) {
    new TWEEN.
    Tween({y: avatar.rotation.y}).
    to({y: direction}, 100).
    onUpdate(function () {
      avatar.rotation.y = this.y;
    }).
    start();
  }

  // ******** AVATAR acrobatics

  //flipping on off
  var is_flipping = false;
  //cartwheeln on off
  var is_cartwheeln = false;
  //spin on off
  var is_spinning = false;

  function acrobatics() {
    if (is_flipping) {
   avatar.rotation.x = avatar.rotation.x + 0.05;
   }
   if (is_cartwheeln) {
   avatar.rotation.z = avatar.rotation.z + 0.05;
   }
   if (is_spinning) {
   avatar.rotation.y = avatar.rotation.y + 0.05;
   }

  }

  // MOVES AVATAR WHEN KEY EVENT IS TRIGGERED
  var is_moving_right, is_moving_left, is_moving_forward, is_moving_back;
  function isWalking() {
    if (is_moving_right) return true;
    if (is_moving_left) return true;
    if (is_moving_forward) return true;
    if (is_moving_back) return true;
    return false;
  }

  //listen to keyboard events ON THE KEY PRESS DOWN
  document.addEventListener('keydown', function(event) {
    var code = event.keyCode;
    if (code == 37) {
      marker.position.x = marker.position.x-5;  //left
      is_moving_left = true;
    }
    if (code == 38) {
      marker.position.z = marker.position.z-5;  //up - forward
      is_moving_forward = true;
    }
    if (code == 39) {
      marker.position.x = marker.position.x+5;  //right
      is_moving_right = true;
    }
    if (code == 40) {
      marker.position.z = marker.position.z+5;  //down - back
      is_moving_back = true;
    }
    if (code == 67) is_flipping = !is_flipping;  //c
    if (code == 70) is_cartwheeln = !is_cartwheeln;  //f
    if (code == 71) is_spinning = !is_spinning;  //g

    // PREVENT AVATAR FROM PASSING THROUGH TREES
    if (detectCollisions()) {
      if (is_moving_left) marker.position.x = marker.position.x+5;
      if (is_moving_right) marker.position.x = marker.position.x-5;
      if (is_moving_forward) marker.position.x = marker.position.z+5;
      if (is_moving_back) marker.position.x = marker.position.z-5;
    }
  });

  //listen to keyboard events ON THE KEY RELEASE
  document.addEventListener('keyup', function(event) {
    var code = event.keyCode;

    if (code == 37) is_moving_left = false;
    if (code == 38) is_moving_forward = false;
    if (code == 39) is_moving_right = false;
    if (code == 40) is_moving_back = false;
  });

  // PREVENT AVATAR FROM PASSING THROUGH TREES
  function detectCollisions() {
    var vector = new THREE.Vector3(0,-1,0);
    var ray = new THREE.Ray(marker.position, vector);
    var intersects = ray.intersectObjects(not_allowed);
    if (intersects.length > 0) return true;
    return false;
  }

</script>
