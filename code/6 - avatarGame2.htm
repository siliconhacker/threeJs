<body>6 - avatarGame</body>
<script src="http://gamingJS.com/Three.js"></script>
<script src="http://gamingJS.com/ChromeFixes.js"></script>
<script src="http://gamingJS.com/Tween.js"></script>
<script src="http://gamingJS.com/Scoreboard.js"></script>
<script src="http://gamingJS.com/Sounds.js"></script>
<script>

// Build up the world
var scene = new THREE.Scene();
var aspect_ratio = window.innerWidth / window.innerHeight;
var camera = new THREE.PerspectiveCamera(75, aspect_ratio, 1, 10000);
camera.position.z = 500;
//scene.add(camera);
var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
// Boundary array
var not_allowed = [];
// Game Scoreboard
var scoreboard = new Scoreboard();
scoreboard.countdown(45);
scoreboard.score();
scoreboard.help(
  '[1] Arrow keys to move.<br>'+
  '[2] Space bar to jump for fruit<br>'+
  '[3] Watch for shaking trees<br>'+
  '[4] Jump near the tree before the points stop!<br>'+
  '[5] Refresh page to start over'
);
// Game Over Indicator
var game_over = false;
scoreboard.onTimeExpired(function() {
  scoreboard.messageg("Game Over!");
  game_over = true;
});

// Setup Camera Marker to Build on
var marker = new THREE.Object3D();
scene.add(marker);

// ******** body
var cover = new THREE.MeshNormalMaterial();
var body = new THREE.SphereGeometry(100);
var avatar = new THREE.Mesh(body, cover);
marker.add(avatar);

// ******** hands
var hand = new THREE.SphereGeometry(50);

var right_hand = new THREE.Mesh(hand, cover);
right_hand.position.set(-150, 0, 0);
avatar.add(right_hand);

var left_hand = new THREE.Mesh(hand, cover);
left_hand.position.set(150, 0, 0);
avatar.add(left_hand);

// ******** foots
var foot = new THREE.SphereGeometry(50);

var right_foot = new THREE.Mesh(foot, cover);
right_foot.position.set(-100, -100, 0);
avatar.add(right_foot);

var left_foot = new THREE.Mesh(foot, cover);
left_foot.position.set(100, -100, 0);
avatar.add(left_foot);

// Avatar Setup on Marker
marker.add(camera);

// ********* TREES
var tree_with_treasure;
var trees = [];
trees.push(makeTreeAt( 500, 0));
trees.push(makeTreeAt( -500, 0));
trees.push(makeTreeAt( 750, -1000));
trees.push(makeTreeAt( -750, -1000));

// *******function to spawn trees
function makeTreeAt(x,z) {

 var trunk = new THREE.Mesh(
   new THREE.CylinderGeometry(50, 50, 200),
   new THREE.MeshBasicMaterial({color:0xA0522D})
   );

 var top = new THREE.Mesh(
   new THREE.SphereGeometry(150),
   new THREE.MeshBasicMaterial({color: 0x228B22})
   );
   top.position.y = 175;
   trunk.add(top);

  var boundary = new THREE.Mesh(
    new THREE.CircleGeometry(300),
    new THREE.MeshNormalMaterial()
  );

  boundary.position.y = -100;
  boundary.rotation.x = -Math.PI/2;
  trunk.add(boundary);
  // Boundary array
  not_allowed.push(boundary);
  trunk.position.set(x, -75, z);
  scene.add(trunk);
  return top;
}

// This is the tree that gives score points for a limited time
function shakeTree() {
  tree_with_treasure = Math.floor(Math.random() * trees.length);

  new TWEEN
    .Tween({x:0})
    .to({x: 2*Math.PI}, 200)
    .repeat(20)
    .onUpdate(function() {
      trees[tree_with_treasure].position.x = 75 * Math.sin(this.x);
    })
    .start();

  setTimeout(shakeTree, 12*1000);
}
shakeTree();

// Animate Virtual World
var clock = new THREE.Clock(true);
function animate() {
 requestAnimationFrame(animate);
 TWEEN.update();
 walk();
 turn();
 acrobatics();
 renderer.render(scene, camera);
}
animate();

// ******** avatar walk event 
function walk() {
  if (!isWalking()) return;
  var position = Math.sin(clock.getElapsedTime()*5) * 50;
  right_hand.position.z = position;
  left_hand.position.z = -position;
  right_foot.position.z = -position;
  left_foot.position.z = position;
}

//************** avatar turn event 
function turn() {
  var direction = 0;
  if (is_moving_forward) direction = Math.PI;
  if (is_moving_back) direction = 0;
  if (is_moving_right) direction = Math.PI/2;
  if (is_moving_left) direction = -Math.PI/2;
  spinAvatar(direction);
}


//**************avatar spin event 
function spinAvatar(direction) {
  new TWEEN
  .Tween({y: avatar.rotation.y})
  .to({y: direction}, 100)
  .onUpdate(function () {
    avatar.rotation.y = this.y;
  })
  .start();
}

// ******** acrobatics event 
//flipping on off
var is_flipping = false;
//cartwheeln on off
var is_cartwheeln = false;
//spin on off
var is_spinning = false;

function acrobatics() {
  if (is_flipping) {
  avatar.rotation.x = avatar.rotation.x + 0.05;
  }
  if (is_cartwheeln) {
  avatar.rotation.z = avatar.rotation.z + 0.05;
  }
  if (is_spinning) {
  avatar.rotation.y = avatar.rotation.y + 0.05;
  }
}

// ******** avatar move event 
var is_moving_right, is_moving_left, is_moving_forward, is_moving_back;
function isWalking() {
  if (is_moving_right) return true;
  if (is_moving_left) return true;
  if (is_moving_forward) return true;
  if (is_moving_back) return true;
  return false;
}

//listen to key press events
document.addEventListener('keydown', function(event) {
  var code = event.keyCode;
  if (code == 32) jump();
    //5 is slower 50 is faster
  if (code == 37) {
    marker.position.x = marker.position.x-50;  //left
    is_moving_left = true;
  }
  if (code == 38) {
    marker.position.z = marker.position.z-50;  //up - forward
    is_moving_forward = true;
  }
  if (code == 39) {
    marker.position.x = marker.position.x+50;  //right
    is_moving_right = true;
  }
  if (code == 40) {
    marker.position.z = marker.position.z+50;  //down - back
    is_moving_back = true;
  }
  if (code == 88) is_flipping = !is_flipping;  //x
  if (code == 90) is_cartwheeln = !is_cartwheeln;  //z
  if (code == 89) is_spinning = !is_spinning;  //y

  if (detectCollisions()) {
    if (is_moving_left) marker.position.x = marker.position.x+5;
    if (is_moving_right) marker.position.x = marker.position.x-5;
    if (is_moving_forward) marker.position.x = marker.position.z+5;
    if (is_moving_back) marker.position.x = marker.position.z-5;
  }
});

//listen to key release events
document.addEventListener('keyup', function(event) {
  var code = event.keyCode;

  if (code == 37) is_moving_left = false;
  if (code == 38) is_moving_forward = false;
  if (code == 39) is_moving_right = false;
  if (code == 40) is_moving_back = false;
});

//calculates if shapes have collided
function detectCollisions() {
  var vector = new THREE.Vector3(0,-1,0);
  var ray = new THREE.Ray(marker.position, vector);
  var intersects = ray.intersectObjects(not_allowed);
  if (intersects.length > 0) return true;
  return false;
}

// jumps and calculates score points active
function jump() {
  checkForTreasure();
  animateJump();
}

//calculates if tree returns score 
function checkForTreasure() {
  // is tree active
  if (tree_with_treasure == undefined) return;

  var treasure_tree = trees[tree_with_treasure],
  p1 = treasure_tree.parent.position,
  p2 = marker.position;
  // is avatar jump close enough for points
  var distance = Math.sqrt(
    (p1.x - p2.x)*(p1.x - p2.x) +
    (p1.z - p2.z)*(p1.z - p2.z)
    );

    if (distance<500) {
      scorePoints();
    }
}

//calculates if time is active adds points to score and game sound
function scorePoints() {
  if (scoreboard.getTimeRemaining() === 0) return;
  scoreboard.addPoints(10);
  //come on feel the noise
  Sounds.bubble.play();
  animateFruit();
}

// paints fruit to virtual world
var fruit;
function animateFruit() {
  if (fruit) return;
  fruit = new THREE.Mesh(
    new THREE.CylinderGeometry(25,25,5,25),
    new THREE.MeshBasicMaterial({color: 0xFFD700})
    );
  fruit.rotation.x = Math.PI/2;

  marker.add(fruit);
  
  //chain together tween animation smoothness
  new TWEEN.
    Tween({
      height:150,
      spin: 0
    }).
    to ({
      height:250,
      spin:4
    }, 500).
    onUpdate(function() {
      fruit.position.y = this.height;
      fruit.rotation.z = this.spin;
    }).
    onComplete(function() {
      marker.remove(fruit);
      fruit = undefined;
    }).
    start();
}

//chain together tween animation smoothness
function animateJump() {
  new TWEEN
    .Tween({jump: 0})
    .to({jump: Math.PI}, 500)
    .onUpdate(function () {
      marker.position.y = 200* Math.sin(this.jump);
    })
    .start();
}


</script>
